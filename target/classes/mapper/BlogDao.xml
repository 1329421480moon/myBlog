<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.blog.dao.BlogDao">

    <resultMap id="blog" type="Blog">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="flag" column="flag"/>
        <result property="views" column="views"/>
        <result property="updateTime" column="update_time"/>
        <result property="typeId" column="type_id"/>
        <result property="firstPicture" column="first_picture"/>
        <result property="shareStatement" column="share_statement"/>
        <result property="published" column="published"/>
        <result property="appreciation" column="appreciation"/>
        <result property="commentabled" column="commentabled"/>
        <result property="description" column="description"/>
        <result property="recommend" column="recommend"/>
        <result property="createTime" column="create_time"/>
        <!--外键-->
        <result property="typeId" column="type_id"/>
        <result property="userId" column="user_id"/>
        <result property="tagIds" column="tag_ids"/>
        <!-- 一对一 -->
        <association property="type" javaType="com.blog.pojo.Type">
            <id property="id" column="tid"/>
            <result property="name" column="name"/>
        </association>
        <association property="user" javaType="User">
            <id property="id" column="uid"/>
            <result property="nickname" column="nickname"/>
            <result property="username" column="username"/>
            <result property="email" column="email"/>
            <result property="avatar" column="avatar"/>
            <result property="type" column="type"/>
            <result property="createTime" column="create_time"/>
            <result property="updateTime" column="update_time"/>
        </association>
        <collection property="tags" ofType="Tag">
            <id property="id" column="tid"/>
            <result property="name" column="tagname"/>
        </collection>
    </resultMap>

    <select id="getAllBlog" resultMap="blog">  /*后台博客展示*/
        SELECT b.id, b.title, b.update_time, b.recommend, b.type_id, b.published,
        t.id tid , t.name
        FROM t_blog b INNER JOIN t_type t
        ON b.type_id = t.id  ORDER BY update_time DESC  /*博客类型id=类型id*/
    </select>


    <delete id="deleteBlog">
        delete from t_blog where id = #{id}
    </delete>

    <select id="getIndexBlog" resultMap="blog">  /*主页博客展示（这里获取所有的博客）,按照时间降序*/
        SELECT b.id, b.title, b.first_picture, b.views, b.update_time, b.description,
        t.name , t.id tid,
        u.nickname, u.avatar
        FROM t_blog b
        inner JOIN t_type t ON b.type_id = t.id
        inner JOIN t_user u ON b.user_id = u.id
        ORDER BY b.update_time DESC
    </select>


    <select id="getByTypeId" resultMap="blog">/*根据分类的id获取博客、分类、用户（和 getIndexBlog几乎是一样的）*/
        SELECT b.id, b.title, b.first_picture, b.views, b.update_time, b.description,
        t.name , t.id tid,
        u.nickname, u.avatar
        FROM t_blog b
        INNER JOIN t_type t ON b.type_id = t.id
        INNER JOIN t_user u
        ON u.id = b.user_id
        WHERE b.type_id = #{typeId} ORDER BY b.update_time DESC
    </select>

    <select id="getByTagId" resultMap="blog">
        SELECT b.id, b.title, b.first_picture, b.views, b.update_time, b.description,
        t.name , t.id tid,
        t1.name tagname, t1.id tagid,
        u.nickname, u.avatar
        FROM t_blog b
        INNER JOIN t_type t ON b.type_id = t.id
        INNER JOIN t_user u ON u.id = b.user_id
        INNER JOIN t_blog_tags tb ON tb.blog_id = b.id
        INNER JOIN t_tag t1 ON tb.tag_id = t1.id
        WHERE  t1.id = #{tagId}
        ORDER BY b.update_time DESC

    </select>

    <select id="getAllRecommendBlog" resultMap="blog">/*获取前八条的数据，用于最新的*/
        select id, title, recommend from t_blog order by update_time desc limit 0,8
    </select>

    <select id="getBlog" resultMap="blog"> /*后台展示博客*/
        select b.id, b.published, b.flag, b.title, b.content, b.type_id,
         b.tag_ids, b.first_picture, b.description, b.recommend,
         b.share_statement, b.appreciation, b.commentabled,t.name
        FROM t_blog b,t_type t  WHERE  b.id = #{id} AND b.type_id = t.id
    </select>

    <select id="getDetailedBlog" resultMap="blog">  /*博客详情*/
        select b.id, b.first_picture, b.flag, b.title, b.content, b.views,
        b.update_time,b.commentabled, b.share_statement, b.appreciation,
        u.nickname, u.avatar,
        tag.id tagid, tag.name tagname
        from t_blog b, t_user u, t_tag tag, t_blog_tags tb
        where b.user_id = u.id and tb.blog_id = b.id and tb.tag_id = tag.id and  b.id = #{id}
    </select>

    <select id="getSearchBlog" resultMap="blog">
        <bind name="pattern" value="'%' + query + '%'"/>
        SELECT b.id, b.title, b.first_picture, b.views, b.update_time, b.description,
        t.name,
        u.nickname, u.avatar
        FROM t_blog b
        INNER JOIN t_type t ON b.type_id = t.id
        INNER JOIN t_user u ON u.id = b.user_id/*博客的显示肯定要有博客和博客的分类和用户的信息，全局搜索博客，包括标题和内容*/
        WHERE  (b.title like #{pattern} or b.content like #{pattern})
        ORDER BY b.update_time DESC
    </select>

    <select id="searchAllBlog" parameterType="com.blog.pojo.BlogQuery" resultMap="blog">

        /*模糊查询*/
        select b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id, t.name
        from t_blog b ,t_type t
        <where>
            <if test="1 == 1">
                b.type_id = t.id /*博客类型id=类型id*/
            </if>
            <if test="typeId != null and typeId != ''">
                and b.type_id = #{typeId} /*根据博客类型查询*/
            </if>
            <if test="recommend != null and recommend != ''">
                and b.recommend = #{recommend} /*根据博客推荐查询*/
            </if>
            <if test="title != null and title != ''">
                <bind name="pattern" value="'%' + title + '%'"/>
                and b.title like #{pattern} /*根据博客title模糊查询*/
            </if>
        </where>
    </select>

    <update id="updateBlog" parameterType="Blog">
        update t_blog set published = #{published},flag = #{flag} ,
        title = #{title}, content = #{content}, type_id = #{typeId}, tag_ids = #{tagIds},
        first_picture = #{firstPicture} , description = #{description} , recommend = #{recommend} ,
        share_statement = #{shareStatement}, appreciation = #{appreciation},
        commentabled = #{commentabled} ,update_time = #{updateTime} where id = #{id};
    </update>

    <!--useGeneratedKeys="true"；使用自增主键获取主键值策略
        keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性
    -->
    <insert id="saveBlog" parameterType="Blog" useGeneratedKeys="true" keyProperty="id">
        insert into t_blog (title, content, first_picture, flag,
        views, appreciation, share_statement, commentabled,published,
        recommend, create_time, update_time, type_id, tag_ids, user_id, description)
        values (#{title}, #{content}, #{firstPicture}, #{flag}, #{views}, #{appreciation},
        #{shareStatement}, #{commentabled}, #{published}, #{recommend}, #{createTime},
        #{updateTime}, #{typeId}, #{tagIds}, #{userId}, #{description});
    </insert>

    <insert id="saveBlogAndTag" parameterType="BlogAndTag">
        insert into t_blog_tags (tag_id, blog_id) values (#{tagId},#{blogId});
    </insert>


    <select id="findGroupYear" resultType="String">
        select DATE_FORMAT(b.update_time, '%Y') from t_blog b order by b.update_time desc
    </select>

    <select id="findByYear" resultMap="blog">
        select b.title, b.update_time, b.id, b.flag
        from t_blog b
        where DATE_FORMAT(b.update_time, "%Y") = #{year}
    </select>


    <!--根据用户点击更新博客的浏览的数目-->
    <update id="updateViewsById">
        update t_blog b set b.views = b.views+1 where b.id = #{id}
    </update>
</mapper>